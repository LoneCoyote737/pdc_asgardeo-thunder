// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package modelmock

import (
	mock "github.com/stretchr/testify/mock"
)

// NewDBQueryInterfaceMock creates a new instance of DBQueryInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBQueryInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBQueryInterfaceMock {
	mock := &DBQueryInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DBQueryInterfaceMock is an autogenerated mock type for the DBQueryInterface type
type DBQueryInterfaceMock struct {
	mock.Mock
}

type DBQueryInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DBQueryInterfaceMock) EXPECT() *DBQueryInterfaceMock_Expecter {
	return &DBQueryInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetID provides a mock function for the type DBQueryInterfaceMock
func (_mock *DBQueryInterfaceMock) GetID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// DBQueryInterfaceMock_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type DBQueryInterfaceMock_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *DBQueryInterfaceMock_Expecter) GetID() *DBQueryInterfaceMock_GetID_Call {
	return &DBQueryInterfaceMock_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *DBQueryInterfaceMock_GetID_Call) Run(run func()) *DBQueryInterfaceMock_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DBQueryInterfaceMock_GetID_Call) Return(s string) *DBQueryInterfaceMock_GetID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *DBQueryInterfaceMock_GetID_Call) RunAndReturn(run func() string) *DBQueryInterfaceMock_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuery provides a mock function for the type DBQueryInterfaceMock
func (_mock *DBQueryInterfaceMock) GetQuery(dbType string) string {
	ret := _mock.Called(dbType)

	if len(ret) == 0 {
		panic("no return value specified for GetQuery")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(dbType)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// DBQueryInterfaceMock_GetQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuery'
type DBQueryInterfaceMock_GetQuery_Call struct {
	*mock.Call
}

// GetQuery is a helper method to define mock.On call
//   - dbType string
func (_e *DBQueryInterfaceMock_Expecter) GetQuery(dbType interface{}) *DBQueryInterfaceMock_GetQuery_Call {
	return &DBQueryInterfaceMock_GetQuery_Call{Call: _e.mock.On("GetQuery", dbType)}
}

func (_c *DBQueryInterfaceMock_GetQuery_Call) Run(run func(dbType string)) *DBQueryInterfaceMock_GetQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DBQueryInterfaceMock_GetQuery_Call) Return(s string) *DBQueryInterfaceMock_GetQuery_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *DBQueryInterfaceMock_GetQuery_Call) RunAndReturn(run func(dbType string) string) *DBQueryInterfaceMock_GetQuery_Call {
	_c.Call.Return(run)
	return _c
}
