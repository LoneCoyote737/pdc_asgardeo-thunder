// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storemock

import (
	"github.com/asgardeo/thunder/internal/oauth/session/model"
	mock "github.com/stretchr/testify/mock"
)

// NewSessionDataStoreInterfaceMock creates a new instance of SessionDataStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionDataStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionDataStoreInterfaceMock {
	mock := &SessionDataStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SessionDataStoreInterfaceMock is an autogenerated mock type for the SessionDataStoreInterface type
type SessionDataStoreInterfaceMock struct {
	mock.Mock
}

type SessionDataStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionDataStoreInterfaceMock) EXPECT() *SessionDataStoreInterfaceMock_Expecter {
	return &SessionDataStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// AddSession provides a mock function for the type SessionDataStoreInterfaceMock
func (_mock *SessionDataStoreInterfaceMock) AddSession(key string, value model.SessionData) {
	_mock.Called(key, value)
	return
}

// SessionDataStoreInterfaceMock_AddSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSession'
type SessionDataStoreInterfaceMock_AddSession_Call struct {
	*mock.Call
}

// AddSession is a helper method to define mock.On call
//   - key string
//   - value model.SessionData
func (_e *SessionDataStoreInterfaceMock_Expecter) AddSession(key interface{}, value interface{}) *SessionDataStoreInterfaceMock_AddSession_Call {
	return &SessionDataStoreInterfaceMock_AddSession_Call{Call: _e.mock.On("AddSession", key, value)}
}

func (_c *SessionDataStoreInterfaceMock_AddSession_Call) Run(run func(key string, value model.SessionData)) *SessionDataStoreInterfaceMock_AddSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 model.SessionData
		if args[1] != nil {
			arg1 = args[1].(model.SessionData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SessionDataStoreInterfaceMock_AddSession_Call) Return() *SessionDataStoreInterfaceMock_AddSession_Call {
	_c.Call.Return()
	return _c
}

func (_c *SessionDataStoreInterfaceMock_AddSession_Call) RunAndReturn(run func(key string, value model.SessionData)) *SessionDataStoreInterfaceMock_AddSession_Call {
	_c.Run(run)
	return _c
}

// ClearSession provides a mock function for the type SessionDataStoreInterfaceMock
func (_mock *SessionDataStoreInterfaceMock) ClearSession(key string) {
	_mock.Called(key)
	return
}

// SessionDataStoreInterfaceMock_ClearSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearSession'
type SessionDataStoreInterfaceMock_ClearSession_Call struct {
	*mock.Call
}

// ClearSession is a helper method to define mock.On call
//   - key string
func (_e *SessionDataStoreInterfaceMock_Expecter) ClearSession(key interface{}) *SessionDataStoreInterfaceMock_ClearSession_Call {
	return &SessionDataStoreInterfaceMock_ClearSession_Call{Call: _e.mock.On("ClearSession", key)}
}

func (_c *SessionDataStoreInterfaceMock_ClearSession_Call) Run(run func(key string)) *SessionDataStoreInterfaceMock_ClearSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SessionDataStoreInterfaceMock_ClearSession_Call) Return() *SessionDataStoreInterfaceMock_ClearSession_Call {
	_c.Call.Return()
	return _c
}

func (_c *SessionDataStoreInterfaceMock_ClearSession_Call) RunAndReturn(run func(key string)) *SessionDataStoreInterfaceMock_ClearSession_Call {
	_c.Run(run)
	return _c
}

// ClearSessionStore provides a mock function for the type SessionDataStoreInterfaceMock
func (_mock *SessionDataStoreInterfaceMock) ClearSessionStore() {
	_mock.Called()
	return
}

// SessionDataStoreInterfaceMock_ClearSessionStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearSessionStore'
type SessionDataStoreInterfaceMock_ClearSessionStore_Call struct {
	*mock.Call
}

// ClearSessionStore is a helper method to define mock.On call
func (_e *SessionDataStoreInterfaceMock_Expecter) ClearSessionStore() *SessionDataStoreInterfaceMock_ClearSessionStore_Call {
	return &SessionDataStoreInterfaceMock_ClearSessionStore_Call{Call: _e.mock.On("ClearSessionStore")}
}

func (_c *SessionDataStoreInterfaceMock_ClearSessionStore_Call) Run(run func()) *SessionDataStoreInterfaceMock_ClearSessionStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SessionDataStoreInterfaceMock_ClearSessionStore_Call) Return() *SessionDataStoreInterfaceMock_ClearSessionStore_Call {
	_c.Call.Return()
	return _c
}

func (_c *SessionDataStoreInterfaceMock_ClearSessionStore_Call) RunAndReturn(run func()) *SessionDataStoreInterfaceMock_ClearSessionStore_Call {
	_c.Run(run)
	return _c
}

// GetSession provides a mock function for the type SessionDataStoreInterfaceMock
func (_mock *SessionDataStoreInterfaceMock) GetSession(key string) (bool, model.SessionData) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 bool
	var r1 model.SessionData
	if returnFunc, ok := ret.Get(0).(func(string) (bool, model.SessionData)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) model.SessionData); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(model.SessionData)
	}
	return r0, r1
}

// SessionDataStoreInterfaceMock_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type SessionDataStoreInterfaceMock_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - key string
func (_e *SessionDataStoreInterfaceMock_Expecter) GetSession(key interface{}) *SessionDataStoreInterfaceMock_GetSession_Call {
	return &SessionDataStoreInterfaceMock_GetSession_Call{Call: _e.mock.On("GetSession", key)}
}

func (_c *SessionDataStoreInterfaceMock_GetSession_Call) Run(run func(key string)) *SessionDataStoreInterfaceMock_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SessionDataStoreInterfaceMock_GetSession_Call) Return(b bool, sessionData model.SessionData) *SessionDataStoreInterfaceMock_GetSession_Call {
	_c.Call.Return(b, sessionData)
	return _c
}

func (_c *SessionDataStoreInterfaceMock_GetSession_Call) RunAndReturn(run func(key string) (bool, model.SessionData)) *SessionDataStoreInterfaceMock_GetSession_Call {
	_c.Call.Return(run)
	return _c
}
