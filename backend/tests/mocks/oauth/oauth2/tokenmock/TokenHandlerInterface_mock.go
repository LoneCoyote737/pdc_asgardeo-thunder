// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package tokenmock

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewTokenHandlerInterfaceMock creates a new instance of TokenHandlerInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenHandlerInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenHandlerInterfaceMock {
	mock := &TokenHandlerInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TokenHandlerInterfaceMock is an autogenerated mock type for the TokenHandlerInterface type
type TokenHandlerInterfaceMock struct {
	mock.Mock
}

type TokenHandlerInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenHandlerInterfaceMock) EXPECT() *TokenHandlerInterfaceMock_Expecter {
	return &TokenHandlerInterfaceMock_Expecter{mock: &_m.Mock}
}

// HandleTokenRequest provides a mock function for the type TokenHandlerInterfaceMock
func (_mock *TokenHandlerInterfaceMock) HandleTokenRequest(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// TokenHandlerInterfaceMock_HandleTokenRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleTokenRequest'
type TokenHandlerInterfaceMock_HandleTokenRequest_Call struct {
	*mock.Call
}

// HandleTokenRequest is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *TokenHandlerInterfaceMock_Expecter) HandleTokenRequest(w interface{}, r interface{}) *TokenHandlerInterfaceMock_HandleTokenRequest_Call {
	return &TokenHandlerInterfaceMock_HandleTokenRequest_Call{Call: _e.mock.On("HandleTokenRequest", w, r)}
}

func (_c *TokenHandlerInterfaceMock_HandleTokenRequest_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *TokenHandlerInterfaceMock_HandleTokenRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TokenHandlerInterfaceMock_HandleTokenRequest_Call) Return() *TokenHandlerInterfaceMock_HandleTokenRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *TokenHandlerInterfaceMock_HandleTokenRequest_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *TokenHandlerInterfaceMock_HandleTokenRequest_Call {
	_c.Run(run)
	return _c
}
