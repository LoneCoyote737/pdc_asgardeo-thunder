// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package authzmock

import (
	model0 "github.com/asgardeo/thunder/internal/application/model"
	"github.com/asgardeo/thunder/internal/oauth/oauth2/authz/model"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthorizationValidatorInterfaceMock creates a new instance of AuthorizationValidatorInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizationValidatorInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorizationValidatorInterfaceMock {
	mock := &AuthorizationValidatorInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthorizationValidatorInterfaceMock is an autogenerated mock type for the AuthorizationValidatorInterface type
type AuthorizationValidatorInterfaceMock struct {
	mock.Mock
}

type AuthorizationValidatorInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorizationValidatorInterfaceMock) EXPECT() *AuthorizationValidatorInterfaceMock_Expecter {
	return &AuthorizationValidatorInterfaceMock_Expecter{mock: &_m.Mock}
}

// validateInitialAuthorizationRequest provides a mock function for the type AuthorizationValidatorInterfaceMock
func (_mock *AuthorizationValidatorInterfaceMock) validateInitialAuthorizationRequest(msg *model.OAuthMessage, oauthApp *model0.OAuthAppConfigProcessedDTO) (bool, string, string) {
	ret := _mock.Called(msg, oauthApp)

	if len(ret) == 0 {
		panic("no return value specified for validateInitialAuthorizationRequest")
	}

	var r0 bool
	var r1 string
	var r2 string
	if returnFunc, ok := ret.Get(0).(func(*model.OAuthMessage, *model0.OAuthAppConfigProcessedDTO) (bool, string, string)); ok {
		return returnFunc(msg, oauthApp)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.OAuthMessage, *model0.OAuthAppConfigProcessedDTO) bool); ok {
		r0 = returnFunc(msg, oauthApp)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*model.OAuthMessage, *model0.OAuthAppConfigProcessedDTO) string); ok {
		r1 = returnFunc(msg, oauthApp)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(*model.OAuthMessage, *model0.OAuthAppConfigProcessedDTO) string); ok {
		r2 = returnFunc(msg, oauthApp)
	} else {
		r2 = ret.Get(2).(string)
	}
	return r0, r1, r2
}

// AuthorizationValidatorInterfaceMock_validateInitialAuthorizationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'validateInitialAuthorizationRequest'
type AuthorizationValidatorInterfaceMock_validateInitialAuthorizationRequest_Call struct {
	*mock.Call
}

// validateInitialAuthorizationRequest is a helper method to define mock.On call
//   - msg *model.OAuthMessage
//   - oauthApp *model0.OAuthAppConfigProcessedDTO
func (_e *AuthorizationValidatorInterfaceMock_Expecter) validateInitialAuthorizationRequest(msg interface{}, oauthApp interface{}) *AuthorizationValidatorInterfaceMock_validateInitialAuthorizationRequest_Call {
	return &AuthorizationValidatorInterfaceMock_validateInitialAuthorizationRequest_Call{Call: _e.mock.On("validateInitialAuthorizationRequest", msg, oauthApp)}
}

func (_c *AuthorizationValidatorInterfaceMock_validateInitialAuthorizationRequest_Call) Run(run func(msg *model.OAuthMessage, oauthApp *model0.OAuthAppConfigProcessedDTO)) *AuthorizationValidatorInterfaceMock_validateInitialAuthorizationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.OAuthMessage
		if args[0] != nil {
			arg0 = args[0].(*model.OAuthMessage)
		}
		var arg1 *model0.OAuthAppConfigProcessedDTO
		if args[1] != nil {
			arg1 = args[1].(*model0.OAuthAppConfigProcessedDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthorizationValidatorInterfaceMock_validateInitialAuthorizationRequest_Call) Return(b bool, s string, s1 string) *AuthorizationValidatorInterfaceMock_validateInitialAuthorizationRequest_Call {
	_c.Call.Return(b, s, s1)
	return _c
}

func (_c *AuthorizationValidatorInterfaceMock_validateInitialAuthorizationRequest_Call) RunAndReturn(run func(msg *model.OAuthMessage, oauthApp *model0.OAuthAppConfigProcessedDTO) (bool, string, string)) *AuthorizationValidatorInterfaceMock_validateInitialAuthorizationRequest_Call {
	_c.Call.Return(run)
	return _c
}
