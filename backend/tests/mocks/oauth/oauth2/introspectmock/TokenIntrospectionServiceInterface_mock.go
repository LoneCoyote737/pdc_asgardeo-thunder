// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package introspectmock

import (
	"github.com/asgardeo/thunder/internal/oauth/oauth2/introspect"
	mock "github.com/stretchr/testify/mock"
)

// NewTokenIntrospectionServiceInterfaceMock creates a new instance of TokenIntrospectionServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenIntrospectionServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenIntrospectionServiceInterfaceMock {
	mock := &TokenIntrospectionServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TokenIntrospectionServiceInterfaceMock is an autogenerated mock type for the TokenIntrospectionServiceInterface type
type TokenIntrospectionServiceInterfaceMock struct {
	mock.Mock
}

type TokenIntrospectionServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenIntrospectionServiceInterfaceMock) EXPECT() *TokenIntrospectionServiceInterfaceMock_Expecter {
	return &TokenIntrospectionServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// IntrospectToken provides a mock function for the type TokenIntrospectionServiceInterfaceMock
func (_mock *TokenIntrospectionServiceInterfaceMock) IntrospectToken(token string, tokenTypeHint string) (*introspect.IntrospectResponse, error) {
	ret := _mock.Called(token, tokenTypeHint)

	if len(ret) == 0 {
		panic("no return value specified for IntrospectToken")
	}

	var r0 *introspect.IntrospectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*introspect.IntrospectResponse, error)); ok {
		return returnFunc(token, tokenTypeHint)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *introspect.IntrospectResponse); ok {
		r0 = returnFunc(token, tokenTypeHint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*introspect.IntrospectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(token, tokenTypeHint)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TokenIntrospectionServiceInterfaceMock_IntrospectToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IntrospectToken'
type TokenIntrospectionServiceInterfaceMock_IntrospectToken_Call struct {
	*mock.Call
}

// IntrospectToken is a helper method to define mock.On call
//   - token string
//   - tokenTypeHint string
func (_e *TokenIntrospectionServiceInterfaceMock_Expecter) IntrospectToken(token interface{}, tokenTypeHint interface{}) *TokenIntrospectionServiceInterfaceMock_IntrospectToken_Call {
	return &TokenIntrospectionServiceInterfaceMock_IntrospectToken_Call{Call: _e.mock.On("IntrospectToken", token, tokenTypeHint)}
}

func (_c *TokenIntrospectionServiceInterfaceMock_IntrospectToken_Call) Run(run func(token string, tokenTypeHint string)) *TokenIntrospectionServiceInterfaceMock_IntrospectToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TokenIntrospectionServiceInterfaceMock_IntrospectToken_Call) Return(introspectResponse *introspect.IntrospectResponse, err error) *TokenIntrospectionServiceInterfaceMock_IntrospectToken_Call {
	_c.Call.Return(introspectResponse, err)
	return _c
}

func (_c *TokenIntrospectionServiceInterfaceMock_IntrospectToken_Call) RunAndReturn(run func(token string, tokenTypeHint string) (*introspect.IntrospectResponse, error)) *TokenIntrospectionServiceInterfaceMock_IntrospectToken_Call {
	_c.Call.Return(run)
	return _c
}
