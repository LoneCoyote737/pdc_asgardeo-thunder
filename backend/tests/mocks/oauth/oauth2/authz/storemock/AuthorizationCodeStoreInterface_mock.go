// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storemock

import (
	"github.com/asgardeo/thunder/internal/oauth/oauth2/authz/model"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthorizationCodeStoreInterfaceMock creates a new instance of AuthorizationCodeStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizationCodeStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorizationCodeStoreInterfaceMock {
	mock := &AuthorizationCodeStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthorizationCodeStoreInterfaceMock is an autogenerated mock type for the AuthorizationCodeStoreInterface type
type AuthorizationCodeStoreInterfaceMock struct {
	mock.Mock
}

type AuthorizationCodeStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorizationCodeStoreInterfaceMock) EXPECT() *AuthorizationCodeStoreInterfaceMock_Expecter {
	return &AuthorizationCodeStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// DeactivateAuthorizationCode provides a mock function for the type AuthorizationCodeStoreInterfaceMock
func (_mock *AuthorizationCodeStoreInterfaceMock) DeactivateAuthorizationCode(authzCode model.AuthorizationCode) error {
	ret := _mock.Called(authzCode)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateAuthorizationCode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.AuthorizationCode) error); ok {
		r0 = returnFunc(authzCode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthorizationCodeStoreInterfaceMock_DeactivateAuthorizationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateAuthorizationCode'
type AuthorizationCodeStoreInterfaceMock_DeactivateAuthorizationCode_Call struct {
	*mock.Call
}

// DeactivateAuthorizationCode is a helper method to define mock.On call
//   - authzCode model.AuthorizationCode
func (_e *AuthorizationCodeStoreInterfaceMock_Expecter) DeactivateAuthorizationCode(authzCode interface{}) *AuthorizationCodeStoreInterfaceMock_DeactivateAuthorizationCode_Call {
	return &AuthorizationCodeStoreInterfaceMock_DeactivateAuthorizationCode_Call{Call: _e.mock.On("DeactivateAuthorizationCode", authzCode)}
}

func (_c *AuthorizationCodeStoreInterfaceMock_DeactivateAuthorizationCode_Call) Run(run func(authzCode model.AuthorizationCode)) *AuthorizationCodeStoreInterfaceMock_DeactivateAuthorizationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.AuthorizationCode
		if args[0] != nil {
			arg0 = args[0].(model.AuthorizationCode)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthorizationCodeStoreInterfaceMock_DeactivateAuthorizationCode_Call) Return(err error) *AuthorizationCodeStoreInterfaceMock_DeactivateAuthorizationCode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthorizationCodeStoreInterfaceMock_DeactivateAuthorizationCode_Call) RunAndReturn(run func(authzCode model.AuthorizationCode) error) *AuthorizationCodeStoreInterfaceMock_DeactivateAuthorizationCode_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireAuthorizationCode provides a mock function for the type AuthorizationCodeStoreInterfaceMock
func (_mock *AuthorizationCodeStoreInterfaceMock) ExpireAuthorizationCode(authzCode model.AuthorizationCode) error {
	ret := _mock.Called(authzCode)

	if len(ret) == 0 {
		panic("no return value specified for ExpireAuthorizationCode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.AuthorizationCode) error); ok {
		r0 = returnFunc(authzCode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthorizationCodeStoreInterfaceMock_ExpireAuthorizationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireAuthorizationCode'
type AuthorizationCodeStoreInterfaceMock_ExpireAuthorizationCode_Call struct {
	*mock.Call
}

// ExpireAuthorizationCode is a helper method to define mock.On call
//   - authzCode model.AuthorizationCode
func (_e *AuthorizationCodeStoreInterfaceMock_Expecter) ExpireAuthorizationCode(authzCode interface{}) *AuthorizationCodeStoreInterfaceMock_ExpireAuthorizationCode_Call {
	return &AuthorizationCodeStoreInterfaceMock_ExpireAuthorizationCode_Call{Call: _e.mock.On("ExpireAuthorizationCode", authzCode)}
}

func (_c *AuthorizationCodeStoreInterfaceMock_ExpireAuthorizationCode_Call) Run(run func(authzCode model.AuthorizationCode)) *AuthorizationCodeStoreInterfaceMock_ExpireAuthorizationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.AuthorizationCode
		if args[0] != nil {
			arg0 = args[0].(model.AuthorizationCode)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthorizationCodeStoreInterfaceMock_ExpireAuthorizationCode_Call) Return(err error) *AuthorizationCodeStoreInterfaceMock_ExpireAuthorizationCode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthorizationCodeStoreInterfaceMock_ExpireAuthorizationCode_Call) RunAndReturn(run func(authzCode model.AuthorizationCode) error) *AuthorizationCodeStoreInterfaceMock_ExpireAuthorizationCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizationCode provides a mock function for the type AuthorizationCodeStoreInterfaceMock
func (_mock *AuthorizationCodeStoreInterfaceMock) GetAuthorizationCode(clientID string, authCode string) (model.AuthorizationCode, error) {
	ret := _mock.Called(clientID, authCode)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizationCode")
	}

	var r0 model.AuthorizationCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (model.AuthorizationCode, error)); ok {
		return returnFunc(clientID, authCode)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) model.AuthorizationCode); ok {
		r0 = returnFunc(clientID, authCode)
	} else {
		r0 = ret.Get(0).(model.AuthorizationCode)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(clientID, authCode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthorizationCodeStoreInterfaceMock_GetAuthorizationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationCode'
type AuthorizationCodeStoreInterfaceMock_GetAuthorizationCode_Call struct {
	*mock.Call
}

// GetAuthorizationCode is a helper method to define mock.On call
//   - clientID string
//   - authCode string
func (_e *AuthorizationCodeStoreInterfaceMock_Expecter) GetAuthorizationCode(clientID interface{}, authCode interface{}) *AuthorizationCodeStoreInterfaceMock_GetAuthorizationCode_Call {
	return &AuthorizationCodeStoreInterfaceMock_GetAuthorizationCode_Call{Call: _e.mock.On("GetAuthorizationCode", clientID, authCode)}
}

func (_c *AuthorizationCodeStoreInterfaceMock_GetAuthorizationCode_Call) Run(run func(clientID string, authCode string)) *AuthorizationCodeStoreInterfaceMock_GetAuthorizationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthorizationCodeStoreInterfaceMock_GetAuthorizationCode_Call) Return(authorizationCode model.AuthorizationCode, err error) *AuthorizationCodeStoreInterfaceMock_GetAuthorizationCode_Call {
	_c.Call.Return(authorizationCode, err)
	return _c
}

func (_c *AuthorizationCodeStoreInterfaceMock_GetAuthorizationCode_Call) RunAndReturn(run func(clientID string, authCode string) (model.AuthorizationCode, error)) *AuthorizationCodeStoreInterfaceMock_GetAuthorizationCode_Call {
	_c.Call.Return(run)
	return _c
}

// InsertAuthorizationCode provides a mock function for the type AuthorizationCodeStoreInterfaceMock
func (_mock *AuthorizationCodeStoreInterfaceMock) InsertAuthorizationCode(authzCode model.AuthorizationCode) error {
	ret := _mock.Called(authzCode)

	if len(ret) == 0 {
		panic("no return value specified for InsertAuthorizationCode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.AuthorizationCode) error); ok {
		r0 = returnFunc(authzCode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthorizationCodeStoreInterfaceMock_InsertAuthorizationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertAuthorizationCode'
type AuthorizationCodeStoreInterfaceMock_InsertAuthorizationCode_Call struct {
	*mock.Call
}

// InsertAuthorizationCode is a helper method to define mock.On call
//   - authzCode model.AuthorizationCode
func (_e *AuthorizationCodeStoreInterfaceMock_Expecter) InsertAuthorizationCode(authzCode interface{}) *AuthorizationCodeStoreInterfaceMock_InsertAuthorizationCode_Call {
	return &AuthorizationCodeStoreInterfaceMock_InsertAuthorizationCode_Call{Call: _e.mock.On("InsertAuthorizationCode", authzCode)}
}

func (_c *AuthorizationCodeStoreInterfaceMock_InsertAuthorizationCode_Call) Run(run func(authzCode model.AuthorizationCode)) *AuthorizationCodeStoreInterfaceMock_InsertAuthorizationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.AuthorizationCode
		if args[0] != nil {
			arg0 = args[0].(model.AuthorizationCode)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthorizationCodeStoreInterfaceMock_InsertAuthorizationCode_Call) Return(err error) *AuthorizationCodeStoreInterfaceMock_InsertAuthorizationCode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthorizationCodeStoreInterfaceMock_InsertAuthorizationCode_Call) RunAndReturn(run func(authzCode model.AuthorizationCode) error) *AuthorizationCodeStoreInterfaceMock_InsertAuthorizationCode_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAuthorizationCode provides a mock function for the type AuthorizationCodeStoreInterfaceMock
func (_mock *AuthorizationCodeStoreInterfaceMock) RevokeAuthorizationCode(authzCode model.AuthorizationCode) error {
	ret := _mock.Called(authzCode)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAuthorizationCode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.AuthorizationCode) error); ok {
		r0 = returnFunc(authzCode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthorizationCodeStoreInterfaceMock_RevokeAuthorizationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAuthorizationCode'
type AuthorizationCodeStoreInterfaceMock_RevokeAuthorizationCode_Call struct {
	*mock.Call
}

// RevokeAuthorizationCode is a helper method to define mock.On call
//   - authzCode model.AuthorizationCode
func (_e *AuthorizationCodeStoreInterfaceMock_Expecter) RevokeAuthorizationCode(authzCode interface{}) *AuthorizationCodeStoreInterfaceMock_RevokeAuthorizationCode_Call {
	return &AuthorizationCodeStoreInterfaceMock_RevokeAuthorizationCode_Call{Call: _e.mock.On("RevokeAuthorizationCode", authzCode)}
}

func (_c *AuthorizationCodeStoreInterfaceMock_RevokeAuthorizationCode_Call) Run(run func(authzCode model.AuthorizationCode)) *AuthorizationCodeStoreInterfaceMock_RevokeAuthorizationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.AuthorizationCode
		if args[0] != nil {
			arg0 = args[0].(model.AuthorizationCode)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthorizationCodeStoreInterfaceMock_RevokeAuthorizationCode_Call) Return(err error) *AuthorizationCodeStoreInterfaceMock_RevokeAuthorizationCode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthorizationCodeStoreInterfaceMock_RevokeAuthorizationCode_Call) RunAndReturn(run func(authzCode model.AuthorizationCode) error) *AuthorizationCodeStoreInterfaceMock_RevokeAuthorizationCode_Call {
	_c.Call.Return(run)
	return _c
}
