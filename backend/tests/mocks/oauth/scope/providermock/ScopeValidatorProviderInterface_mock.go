// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package providermock

import (
	"github.com/asgardeo/thunder/internal/oauth/scope/validator"
	mock "github.com/stretchr/testify/mock"
)

// NewScopeValidatorProviderInterfaceMock creates a new instance of ScopeValidatorProviderInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScopeValidatorProviderInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScopeValidatorProviderInterfaceMock {
	mock := &ScopeValidatorProviderInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ScopeValidatorProviderInterfaceMock is an autogenerated mock type for the ScopeValidatorProviderInterface type
type ScopeValidatorProviderInterfaceMock struct {
	mock.Mock
}

type ScopeValidatorProviderInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ScopeValidatorProviderInterfaceMock) EXPECT() *ScopeValidatorProviderInterfaceMock_Expecter {
	return &ScopeValidatorProviderInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetScopeValidator provides a mock function for the type ScopeValidatorProviderInterfaceMock
func (_mock *ScopeValidatorProviderInterfaceMock) GetScopeValidator() validator.ScopeValidatorInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScopeValidator")
	}

	var r0 validator.ScopeValidatorInterface
	if returnFunc, ok := ret.Get(0).(func() validator.ScopeValidatorInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validator.ScopeValidatorInterface)
		}
	}
	return r0
}

// ScopeValidatorProviderInterfaceMock_GetScopeValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScopeValidator'
type ScopeValidatorProviderInterfaceMock_GetScopeValidator_Call struct {
	*mock.Call
}

// GetScopeValidator is a helper method to define mock.On call
func (_e *ScopeValidatorProviderInterfaceMock_Expecter) GetScopeValidator() *ScopeValidatorProviderInterfaceMock_GetScopeValidator_Call {
	return &ScopeValidatorProviderInterfaceMock_GetScopeValidator_Call{Call: _e.mock.On("GetScopeValidator")}
}

func (_c *ScopeValidatorProviderInterfaceMock_GetScopeValidator_Call) Run(run func()) *ScopeValidatorProviderInterfaceMock_GetScopeValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ScopeValidatorProviderInterfaceMock_GetScopeValidator_Call) Return(scopeValidatorInterface validator.ScopeValidatorInterface) *ScopeValidatorProviderInterfaceMock_GetScopeValidator_Call {
	_c.Call.Return(scopeValidatorInterface)
	return _c
}

func (_c *ScopeValidatorProviderInterfaceMock_GetScopeValidator_Call) RunAndReturn(run func() validator.ScopeValidatorInterface) *ScopeValidatorProviderInterfaceMock_GetScopeValidator_Call {
	_c.Call.Return(run)
	return _c
}
