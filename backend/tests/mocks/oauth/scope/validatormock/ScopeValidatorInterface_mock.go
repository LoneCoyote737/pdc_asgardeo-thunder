// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package validatormock

import (
	"github.com/asgardeo/thunder/internal/oauth/scope/validator"
	mock "github.com/stretchr/testify/mock"
)

// NewScopeValidatorInterfaceMock creates a new instance of ScopeValidatorInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScopeValidatorInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScopeValidatorInterfaceMock {
	mock := &ScopeValidatorInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ScopeValidatorInterfaceMock is an autogenerated mock type for the ScopeValidatorInterface type
type ScopeValidatorInterfaceMock struct {
	mock.Mock
}

type ScopeValidatorInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ScopeValidatorInterfaceMock) EXPECT() *ScopeValidatorInterfaceMock_Expecter {
	return &ScopeValidatorInterfaceMock_Expecter{mock: &_m.Mock}
}

// ValidateScopes provides a mock function for the type ScopeValidatorInterfaceMock
func (_mock *ScopeValidatorInterfaceMock) ValidateScopes(requestedScopes string, clientID string) (string, *validator.ScopeError) {
	ret := _mock.Called(requestedScopes, clientID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateScopes")
	}

	var r0 string
	var r1 *validator.ScopeError
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, *validator.ScopeError)); ok {
		return returnFunc(requestedScopes, clientID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(requestedScopes, clientID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) *validator.ScopeError); ok {
		r1 = returnFunc(requestedScopes, clientID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*validator.ScopeError)
		}
	}
	return r0, r1
}

// ScopeValidatorInterfaceMock_ValidateScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateScopes'
type ScopeValidatorInterfaceMock_ValidateScopes_Call struct {
	*mock.Call
}

// ValidateScopes is a helper method to define mock.On call
//   - requestedScopes string
//   - clientID string
func (_e *ScopeValidatorInterfaceMock_Expecter) ValidateScopes(requestedScopes interface{}, clientID interface{}) *ScopeValidatorInterfaceMock_ValidateScopes_Call {
	return &ScopeValidatorInterfaceMock_ValidateScopes_Call{Call: _e.mock.On("ValidateScopes", requestedScopes, clientID)}
}

func (_c *ScopeValidatorInterfaceMock_ValidateScopes_Call) Run(run func(requestedScopes string, clientID string)) *ScopeValidatorInterfaceMock_ValidateScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ScopeValidatorInterfaceMock_ValidateScopes_Call) Return(s string, scopeError *validator.ScopeError) *ScopeValidatorInterfaceMock_ValidateScopes_Call {
	_c.Call.Return(s, scopeError)
	return _c
}

func (_c *ScopeValidatorInterfaceMock_ValidateScopes_Call) RunAndReturn(run func(requestedScopes string, clientID string) (string, *validator.ScopeError)) *ScopeValidatorInterfaceMock_ValidateScopes_Call {
	_c.Call.Return(run)
	return _c
}
