// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package certmock

import (
	"crypto/tls"

	"github.com/asgardeo/thunder/internal/system/config"
	mock "github.com/stretchr/testify/mock"
)

// NewSystemCertificateServiceInterfaceMock creates a new instance of SystemCertificateServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystemCertificateServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SystemCertificateServiceInterfaceMock {
	mock := &SystemCertificateServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SystemCertificateServiceInterfaceMock is an autogenerated mock type for the SystemCertificateServiceInterface type
type SystemCertificateServiceInterfaceMock struct {
	mock.Mock
}

type SystemCertificateServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SystemCertificateServiceInterfaceMock) EXPECT() *SystemCertificateServiceInterfaceMock_Expecter {
	return &SystemCertificateServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetCertificateKid provides a mock function for the type SystemCertificateServiceInterfaceMock
func (_mock *SystemCertificateServiceInterfaceMock) GetCertificateKid() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateKid")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemCertificateServiceInterfaceMock_GetCertificateKid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateKid'
type SystemCertificateServiceInterfaceMock_GetCertificateKid_Call struct {
	*mock.Call
}

// GetCertificateKid is a helper method to define mock.On call
func (_e *SystemCertificateServiceInterfaceMock_Expecter) GetCertificateKid() *SystemCertificateServiceInterfaceMock_GetCertificateKid_Call {
	return &SystemCertificateServiceInterfaceMock_GetCertificateKid_Call{Call: _e.mock.On("GetCertificateKid")}
}

func (_c *SystemCertificateServiceInterfaceMock_GetCertificateKid_Call) Run(run func()) *SystemCertificateServiceInterfaceMock_GetCertificateKid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SystemCertificateServiceInterfaceMock_GetCertificateKid_Call) Return(s string, err error) *SystemCertificateServiceInterfaceMock_GetCertificateKid_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *SystemCertificateServiceInterfaceMock_GetCertificateKid_Call) RunAndReturn(run func() (string, error)) *SystemCertificateServiceInterfaceMock_GetCertificateKid_Call {
	_c.Call.Return(run)
	return _c
}

// GetTLSConfig provides a mock function for the type SystemCertificateServiceInterfaceMock
func (_mock *SystemCertificateServiceInterfaceMock) GetTLSConfig(cfg *config.Config, currentDirectory string) (*tls.Config, error) {
	ret := _mock.Called(cfg, currentDirectory)

	if len(ret) == 0 {
		panic("no return value specified for GetTLSConfig")
	}

	var r0 *tls.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*config.Config, string) (*tls.Config, error)); ok {
		return returnFunc(cfg, currentDirectory)
	}
	if returnFunc, ok := ret.Get(0).(func(*config.Config, string) *tls.Config); ok {
		r0 = returnFunc(cfg, currentDirectory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tls.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*config.Config, string) error); ok {
		r1 = returnFunc(cfg, currentDirectory)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemCertificateServiceInterfaceMock_GetTLSConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTLSConfig'
type SystemCertificateServiceInterfaceMock_GetTLSConfig_Call struct {
	*mock.Call
}

// GetTLSConfig is a helper method to define mock.On call
//   - cfg *config.Config
//   - currentDirectory string
func (_e *SystemCertificateServiceInterfaceMock_Expecter) GetTLSConfig(cfg interface{}, currentDirectory interface{}) *SystemCertificateServiceInterfaceMock_GetTLSConfig_Call {
	return &SystemCertificateServiceInterfaceMock_GetTLSConfig_Call{Call: _e.mock.On("GetTLSConfig", cfg, currentDirectory)}
}

func (_c *SystemCertificateServiceInterfaceMock_GetTLSConfig_Call) Run(run func(cfg *config.Config, currentDirectory string)) *SystemCertificateServiceInterfaceMock_GetTLSConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *config.Config
		if args[0] != nil {
			arg0 = args[0].(*config.Config)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SystemCertificateServiceInterfaceMock_GetTLSConfig_Call) Return(config1 *tls.Config, err error) *SystemCertificateServiceInterfaceMock_GetTLSConfig_Call {
	_c.Call.Return(config1, err)
	return _c
}

func (_c *SystemCertificateServiceInterfaceMock_GetTLSConfig_Call) RunAndReturn(run func(cfg *config.Config, currentDirectory string) (*tls.Config, error)) *SystemCertificateServiceInterfaceMock_GetTLSConfig_Call {
	_c.Call.Return(run)
	return _c
}
